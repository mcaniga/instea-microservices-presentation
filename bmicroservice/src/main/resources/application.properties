# Defines port on which the HTTP interface of the microservice will be exposed
# If running local setup without docker, ensure that server.port is distict across microservices
server.port=8081

# Defines name with which the microservice will be registered to Eureka Server
# Important for @FeignClient(name=<name>), name must match declared `spring.application.name`
spring.application.name=service-b-data

# URL of the eureka server.
# Microservice B will register on the Eureka server and fetch registry of known services.
# zones note - can be set to different URLs in a multi-zone (region) setup, enabling a client to interact with multiple Eureka servers if needed
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
# Specifies that this microservice want to be registered in Eureka server
# NOTE - false is often used if microservice only wants to discover others, but don't want to be discoverable
eureka.client.register-with-eureka=true
# Specifies that this microservice wants to use Eureka server to discover others (fetch registry of services)
eureka.client.fetch-registry=true

# URI of the Config Server from which the client application will fetch its configuration.
spring.cloud.config.uri=http://localhost:8082
# Determines whether this application should fail to start if it cannot connect to the Config Server
spring.cloud.config.fail-fast=true

management.endpoints.web.exposure.include=refresh

# Specifies the URI of the Vault server.
# This is the base URL where your Vault server is accessible.
spring.cloud.vault.uri=http://localhost:8200
#  Sets the token used for authentication with the Vault server.
#  This token provides the necessary credentials to access Vault.
spring.cloud.vault.token=your-vault-token
# Enables or disables the Vault integration.
# When set to true, the application will attempt to connect to Vault using the specified configurations.
spring.cloud.vault.enabled=true
# Determines whether this application should fail to start if it cannot connect to Vault
spring.cloud.vault.fail-fast=true
# Determines whether the Key-Value (KV) backend is enabled.
# The KV backend is used for storing and retrieving arbitrary secrets in Vault.
spring.cloud.vault.kv.enabled=true
# Specifies the path in Vault where the KV secrets are stored.
# This is often set to a specific path that matches the environment or application.
spring.cloud.vault.kv.backend=secret
# Sets the application name under which the secrets are organized in Vault.
# This is useful for scenarios where multiple applications or services store their secrets in the same Vault but under different paths.
spring.cloud.vault.kv.application-name=${spring.application.name}