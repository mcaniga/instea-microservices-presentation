# Defines port on which the HTTP interface of the microservice will be exposed
# If running local setup without docker, ensure that server.port is distict across microservices
server.port=8080

### Spring API Gateway configuration
# A unique identifier for this particular route
spring.cloud.gateway.routes[0].id=service-b-data-route
# What API Gateway path is being configured
spring.cloud.gateway.routes[0].predicates[0]=Path=/data
# Specifies the load-balanced URI of the target service (service-b-data), integrated with Eureka
spring.cloud.gateway.routes[0].uri=lb://service-b-data
# A filter to rewrite the path from /data (Gateway path) to /process (Service B path)
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/api/data, /api/process

### Eureka configuration
# URL of the eureka server.
# Microservice A will register on the Eureka server and fetch registry of known services.
# zones note - can be set to different URLs in a multi-zone (region) setup, enabling a client to interact with multiple Eureka servers if needed
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
# Specifies that this microservice want to be registered in Eureka server
# NOTE - false is often used if microservice only wants to discover others, but don't want to be discoverable
eureka.client.register-with-eureka=true
# Specifies that this microservice wants to use Eureka server to discover others (fetch registry of services)
eureka.client.fetch-registry=true

### Feign Client configuration
# Maximum time (in milis) the Feign client will attempt a connection before timing out.
# Prevents the client from hanging indefinitely.
feign.client.config.service-b-data.connectTimeout=5000
# Maximum time (in milis) the client will wait for a response AFTER a connection is established.
# Prevents the service from waiting too long for a response
feign.client.config.service-b-data.readTimeout=5000
# Feign logging level:
# - NONE
# - BASIC = method, url, response status, execution time
# - HEADERS = BASIC + headers
# - FULL = HEADERS + bodies
feign.client.config.service-b-data.loggerLevel=full
# Specifies the retry mechanism to use
# - full = Attempts retries up to a certain number of times.
feign.client.config.service-b-data.retryer=full
#  Period (in millis) between retries
feign.client.config.service-b-data.retryPeriod=1000
# Maximum period (in milis) between retry attempts to prevent backoff from growing indefinitely
feign.client.config.service-b-data.retryMaxPeriod=5000
# Sets the maximum number of retry attempts.
feign.client.config.service-b-data.retryMaxAttempts=3
# NOTE: feign has also other configuration - configurable (and also custom) request interceptors, requests encoders, responses decoders, error responses decoders, loggers, ...

### Circuit breaker configuration - https://martinfowler.com/bliki/CircuitBreaker.html
### Circuit breaker monitors for failures, once count of failures is too high, method starts returing error early without trying the call (saves resources)
# Determines whether to register a health indicator for the circuit breaker instance.
# Allows to see circuit state (closed, open, half-open) from Actuator endpoint.
resilience4j.circuitbreaker.instances.service-b-data.register-health-indicator=true
# Records outcome of last N calls when the circuit breaker is closed.
# Recording is needed to determine if the threshold has been reached to open the circuit
resilience4j.circuitbreaker.instances.service-b-data.sliding-window-size=100
# Defines the maximum number of calls allowed to pass through when the circuit breaker is in a half-open state
# Allows a limited number of trial calls to test if the underlying service has recovered before deciding whether to close or open the circuit again.
resilience4j.circuitbreaker.instances.service-b-data.permitted-number-of-calls-in-half-open-state=10
# Specifies the time the circuit breaker should stay open before transitioning to half-open.
# Provides a cooldown period to prevent requests to an unstable or recovering service, giving it time to recover.
resilience4j.circuitbreaker.instances.service-b-data.wait-duration-in-open-state=10000
# Determines the failure rate at which the circuit breaker should open again.
resilience4j.circuitbreaker.instances.service-b-data.failure-rate-threshold=50
# Enables or disables the automatic transition from open to half-open state after the wait duration has elapsed.
# Automates the process of transitioning the circuit breaker to a half-open state to allow a re-evaluation of the state of the connected service.
resilience4j.circuitbreaker.instances.service-b-data.automatic-transition-from-open-to-half-open-enabled=true
# Specifies the minimum number of calls that are required (within the size of the sliding window) before the circuit breaker can calculate the error rate.
# Ensures that there is a sufficient number of calls to make a reliable decision on whether the circuit should open.
resilience4j.circuitbreaker.instances.service-b-data.minimum-number-of-calls=20